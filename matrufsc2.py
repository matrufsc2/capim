import json
import time
from app.api import get_feed, get_prismic_api, prismic_full_link_resolver, get_domain
from cloudstorage.errors import NotFoundError
from flask import Flask, request, got_request_exception
import os
import re
from flask.helpers import make_response
from app.cache import lru_cache, delete_from_cache
from google.appengine.api import users
from google.appengine.api.urlfetch import fetch
from app import api
from app.json_serializer import JSONEncoder
from app.robot.robot import Robot
import hashlib, logging
import rollbar
import rollbar.contrib.flask

try:
    import cPickle as pickle
except ImportError:
    import pickle

app = Flask(__name__)

bots_re = re.compile("(baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot)", re.IGNORECASE)
prerender_re = re.compile("Prerender", re.IGNORECASE)

IN_DEV = "dev" in os.environ.get("SERVER_SOFTWARE", "").lower()
CACHE_RESPONSE_KEY = "cached/response/%d/%s"


if not IN_DEV:
    rollbar.init(
        'ba9bf3c858294e0882d57a243084e20d',
        'production',
        root=os.path.dirname(os.path.realpath(__file__)),
        allow_logging_basic_config=False,
        handler='gae'
    )

    got_request_exception.connect(rollbar.contrib.flask.report_exception, app)
logging = logging.getLogger("matrufsc2")

def can_prerender():
    prerender = False
    if "_escaped_fragment_" in request.args:
        logging.debug("Pre-rendering because of _escaped_fragment_ parameter")
        prerender = True
    user_agent = request.user_agent.string
    if bots_re.search(user_agent):
        logging.debug("Pre-rendering because of user-agent")
        prerender = True
    if prerender_re.search(user_agent):
        logging.debug("Disabling Pre-rendering because of user-agent")
        prerender = False
    return prerender


@app.after_request
def cache_response(response):
    """
    Cache the response if possible

    :param response: The response generated by the controller
    :type response: ConditionalResponse
    :return:
    """
    response.freeze()
    if request.method == 'GET':
        response.headers["Cache-Control"] = "must-revalidate, post-check=0, pre-check=0"
        etag = hashlib.sha1(response.get_data()).hexdigest()
        if request.if_none_match and etag in request.if_none_match:
            return make_response("", 304, response.headers)
        response.set_etag(etag)
    return response

    
@app.route("/api/")
def api_index():
    return "", 404


@app.route("/favicon.ico")
def favicon():
    return "", 301, {"Location": "/img/favicon/favicon.ico"}


def serialize(result, status=200, headers=None):
    if headers is None:
        headers = {}
    headers.setdefault("Content-Type", "application/json")
    if not result and not isinstance(result, list):
        return "", 404, headers
    response = make_response(json.dumps(result, cls=JSONEncoder, separators=(',', ':')), status, headers)
    return response


@app.route("/api/semesters/")
def get_semesters():
    result = api.get_semesters(request.args.to_dict())
    return serialize(result)


@app.route("/api/semesters/<id_value>/")
def get_semester(id_value):
    result = api.get_semester(id_value)
    return serialize(result)


@app.route("/api/campi/")
def get_campi():
    args = request.args.to_dict()
    args["_full"] = False
    result = api.get_campi(args)
    if "X_APPENGINE_CITYLATLONG" in request.headers:
        lat, lon = map(float, request.headers["X_APPENGINE_CITYLATLONG"].split(",", 1))
        result = api.sort_campi_by_distance({
            "campi": result,
            "lat": lat,
            "lon": lon
        })
    return serialize(result)

@app.route("/api/campi/<id_value>")
def get_campus(id_value):
    result = api.get_campus(id_value)
    return serialize(result)


@app.route("/api/disciplines/")
def get_disciplines():
    result = api.get_disciplines(request.args.to_dict())
    return serialize(result)


@app.route("/api/disciplines/<id_value>")
def get_discipline(id_value):
    result = api.get_discipline(id_value)
    return serialize(result)


@app.route("/api/teams/")
def get_teams():
    result = api.get_teams(request.args.to_dict())
    return serialize(result)

@app.route("/api/teams/<id_value>")
def get_team(id_value):
    result = api.get_team(id_value)
    return serialize(result)

@app.route("/api/plans/")
def get_plans():
    result = api.get_plans(request.args.to_dict())
    return serialize(result)

@app.route("/api/plans/", methods=["POST"])
def create_plan():
    try:
        request_body = request.get_data(as_text=True)
        request_body = json.loads(request_body)
        result = api.create_plan(request_body)
    except (ValueError, KeyError), e:
        print e
        result = None
    return serialize(result)

@app.route("/api/plans/<id_value>")
def get_plan(id_value):
    result = api.get_plan(id_value)
    return serialize(result)

@app.route("/api/pages/")
def get_pages():
    result = api.get_pages(request.args.to_dict())
    return serialize(result)


@app.route("/api/pages/<slug>")
def get_page(slug):
    result = api.get_page(slug)
    return serialize(result)

@app.route("/api/categories/")
def get_categories():
    result = api.get_categories(request.args.to_dict())
    return serialize(result)


@app.route("/api/categories/<id_value>")
def get_category(id_value):
    result = api.get_category(id_value)
    return serialize(result)

@app.route("/api/sections/")
def get_sections():
    result = api.get_sections(request.args.to_dict())
    return serialize(result)


@app.route("/api/sections/<id_value>")
def get_section(id_value):
    result = api.get_section(id_value)
    return serialize(result)

@app.route("/api/posts/")
def get_posts():
    result = api.get_posts(request.args.to_dict())
    return serialize(result)


@app.route("/api/posts/<id_value>")
def get_post(id_value):
    result = api.get_post(id_value)
    return serialize(result)


@app.route("/api/questions-groups/")
def get_faqs():
    result = api.get_questions_groups(request.args.to_dict())
    return serialize(result)


@app.route("/api/questions-groups/<id_value>")
def get_faq(id_value):
    result = api.get_question_group(id_value)
    return serialize(result)

@app.route("/api/articles/")
def get_articles():
    result = api.get_articles(request.args.to_dict())
    return serialize(result)

@app.route("/api/articles/<id_value>")
def get_article(id_value):
    result = api.get_article(id_value)
    return serialize(result)

@app.route("/api/plans/<id_value>", methods=['PUT'])
def update_plan(id_value):
    try:
        request_body = request.get_data(as_text=True)
        request_body = json.loads(request_body)
        result = api.update_plan(id_value, request_body)
    except (ValueError, KeyError):
        result = None
    return serialize(result)

@app.route("/api/users/current", methods=["GET"])
def current_user():
    is_authenticated = users.get_current_user() is not None
    login_url = None
    logout_url = None
    if is_authenticated:
        logout_url = users.create_logout_url("/")
    else:
        login_url = users.create_login_url("/")
    return serialize({
        "id": "current",
        "is_authenticated": is_authenticated,
        "login_url": login_url,
        "logout_url": logout_url
    })

@app.route("/api/users", methods=["GET"])
def get_users():
    is_authenticated = users.get_current_user() is not None
    login_url = None
    logout_url = None
    if is_authenticated:
        logout_url = users.create_logout_url("/")
    else:
        login_url = users.create_login_url("/")
    return serialize([{
        "id": "current",
        "is_authenticated": is_authenticated,
        "login_url": login_url,
        "logout_url": logout_url
    }])

@app.route("/api/prismic_preview/")
def prismic_preview():
    form = get_prismic_api()
    preview_token = request.args.to_dict().get("token")
    if not preview_token:
        return make_response("", 404)
    redirect_url = form.preview_session(preview_token, prismic_full_link_resolver, "/")
    response = make_response("", 302, {"Location": redirect_url})
    response.set_cookie("io.prismic.preview", preview_token)
    return response

@app.route("/blog/feed.<type>", methods=["GET"])
def get_blog_feed(type):
    type = type.lower()
    if type not in ["rss", "atom"]:
        return make_response("", 404)
    return make_response(get_feed(type=='atom'), 200, {"Content-Type": "application/rss+xml"})

@app.route("/secret/update/", methods=["GET", "POST"])
def update():
    logging.debug("Updating...")
    start = time.time()
    robot = Robot()
    fut = robot.run(request.get_data())
    """ :type: google.appengine.ext.ndb.Future """
    result = fut.get_result()
    if fut.get_traceback():
        print fut.get_traceback()
    logging.debug("Updated one page in %f seconds", time.time()-start)
    return result


@app.route("/secret/clear_lock/", methods=["GET", "POST"])
def clear_lock():
    try:
        delete_from_cache("robot_lock").get_result()
    except NotFoundError:
        pass
    return "OK", 200, {}


@app.route("/secret/clear_cache/", methods=["GET", "POST"])
def clear_cache():
    logging.debug("Clearing %d items of the LRU Cache", len(lru_cache))
    lru_cache.clear()
    return "OK", 200, {}

@app.route("/sobre/")
def about():
    return "", 301, {
        "Location": "http://%s/sobre/VPCrvCkAAPE-I8ch"%get_domain()
    }

@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def index(path):
    prerender = can_prerender()
    if prerender:
        if IN_DEV:
            prerender_url = "http://127.0.0.1:3000/%s" % request.url
            prerender_headers = {}
        else:
            prerender_url = "http://service.prerender.io/%s" % request.url
            prerender_headers = {"X-Prerender-Token": "{{prerender_token}}"}
        try:
            handler = fetch(prerender_url, headers=prerender_headers, allow_truncated=False,
                            deadline=60, follow_redirects=False)
            content = handler.content
        except:
            prerender = False
    if not prerender:
        if IN_DEV:
            filename = "frontend/views/index.html"
        else:
            filename = "frontend/views/index-optimize.html"
        arq = open(filename)
        content = arq.read()
        if "io.prismic.preview" in request.cookies:
            content = content.replace(
                "{{prismicjs}}",
                "<script type=\"text/javascript\" src=\"//static.cdn.prismic.io/prismic.min.js\"></script>"
            )
        else:
            content = content.replace("{{prismicjs}}", "")
        arq.close()

    return content, 200, {"Content-Type": "text/html; charset=UTF-8"}


if __name__ == "__main__":
    app.run()